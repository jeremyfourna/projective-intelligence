template(name="answerDetails")
	.container
		if Template.subscriptionsReady
			with answer
				a#return.waves-effect.waves-light.btn {{_ "return"}}
				.card
					.card-content
						span.card-title {{_ "answerNumberLevel"}} #{level}
						p {{_ "answerType"}} : #{type}
						.input-field
							input#level.validate(type="number" step="1" min="1" required value="#{level}")
							label.active(for="level") {{_ "level"}}
						.input-field
							input#lowAnswer.validate(type="text" required value="#{lowAnswer}")
							label.active(for="lowAnswer") {{_ "lowAnswer"}}
						if notYesNoAnswer
							.input-field
								input#midAnswer.validate(type="text" value="#{midAnswer}")
								label.active(for="midAnswer") {{_ "midAnswer"}}
						.input-field
							input#highAnswer.validate(type="text" required value="#{highAnswer}")
							label.active(for="highAnswer") {{_ "highAnswer"}}
					.card-action
						a#updateAnswer.waves-effect.waves-light.btn {{_ "validate"}}
				ul.collection.with-header
					li.collection-header
						h4 {{_ "questionsLinkedToAnswerAndOther"}}
					each questionsIdLinked
						with question
							li.collection-item #{title} ({{_ "level"}} : #{level})
								a.removeFromAnswer.secondary-content(href="#!")
									i.material-icons cancel
					each questionNotInAnswer
						li.collection-item #{title} ({{_ "level"}} : #{level})
							a.addToAnswer.secondary-content(href="#!")
								i.material-icons check
		else
			+loader